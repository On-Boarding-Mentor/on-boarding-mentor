import streamlit as st
import random
from openai import OpenAI
from utils.ui_helper import UIHelper

# === Setup UI ===
UIHelper.config_page()
UIHelper.setup_sidebar()

# === Setup OpenAI ===
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# === Multilingual Labels ===
labels = {
    "zh": {
        "title": "üìã Èõ¢ËÅ∑ÊÄíÊ∞£ÈõÜÈªûÂç°",
        "instruction": "Ëº∏ÂÖ•‰∏ÄÂè•Ë©±Ë™™Êòé‰Ω†ÁöÑËÅ∑Â†¥ÊÄíÊ∞£ÔºàÂèØÁî®‰∏≠Êñá„ÄÅÂè∞Ë™ûÁöÜÂèØÔºâÔºåÊàëÂÄëÊúÉËá™ÂãïÂπ´‰Ω†ËìãÁ´†ÔºÅÈõÜÊªø 25 ÈªûÊÄíÊ∞£Â∞±ÂèØ‰ª•ÂÆâÂøÉÈõ¢ËÅ∑Âï¶ÔΩû",
        "placeholder": "‰ªäÂ§©ËÆì‰Ω†ÊÉ≥Èõ¢ËÅ∑ÁöÑ‰∏Ä‰ª∂‰∫ãÊòØ‰ªÄÈ∫ºÔºü",
        "current_mood": "Áï∂ÂâçÊÉÖÁ∑íÔºö",
        "success": "ÊâìÂç°ÊàêÂäüÔºÅÊÄíÊ∞£ÂÄºÔºö",
        "complete": "### üéâ ÊÅ≠Âñú‰Ω†ÂÆåÊàê‰∏ÄÊï¥ÊéíÊÄíÊ∞£ÈõÜÈªûÂç°ÔºÅ\n‰Ω†ÁèæÂú®ÂèØ‰ª•ÂÆâÂøÉÂú∞Á∞ΩÁΩ≤Èõ¢ËÅ∑Áî≥Ë´ãË°®‰∫Ü ‚úçÔ∏è",
        "download_section": "### üìù Ëæ¶ÁêÜÈõ¢ËÅ∑Á®ãÂ∫è",
        "download_button": "üì© ‰∏ãËºâÈõ¢ËÅ∑Áî≥Ë´ãÊõ∏",
        "download_help": "ÈªûÊìä‰ª•‰∏ãÊåâÈàï‰∏ãËºâÊ≠£ÂºèÈõ¢ËÅ∑Áî≥Ë´ãË°®"
    },
    "en": {
        "title": "üìã Resignation Bingo Tracker",
        "instruction": "Write a quick sentence about what made you want to quit today! We'll stamp your bingo card. Collect 25 to resign with peace ‚úåÔ∏è",
        "placeholder": "What made you want to resign today?",
        "current_mood": "Current mood:",
        "success": "Stamped successfully! Rage level:",
        "complete": "### üéâ You've completed a full line of resignation rage!\nYou can now safely submit your resignation ‚úçÔ∏è",
        "download_section": "### üìù Resignation Procedure",
        "download_button": "üì© Download Resignation Form",
        "download_help": "Click the button below to download the resignation form"
    }
}

# === Determine language ===
lang_code = "zh" if st.session_state.get("lang_setting", "English") == "ÁπÅÈ´î‰∏≠Êñá" else "en"
label = labels[lang_code]

# === Bingo Configuration ===
class BingoConfig:
    EMOJI_STAGES = ["üôÇ", "üòê", "üò†", "üò°", "üí£"]
    CATEGORIES = {
        "workload": "Excessive workload or unrealistic demands",
        "role_conflict": "Conflicting expectations or unclear job duties",
        "autonomy": "Lack of control or micromanagement",
        "leadership": "Poor or abusive leadership",
        "toxic_culture": "Hostile or unfriendly atmosphere",
        "unfairness": "Discrimination, favoritism, or injustice",
        "no_growth": "No recognition, feedback, or development",
        "job_insecurity": "Fear of being laid off or instability",
        "work_life_imbalance": "Excessive interference with life",
        "underpaid": "Inadequate salary or no raise",
        "burnout": "Feeling mentally or physically exhausted",
        "overqualified": "Not challenged or skill mismatch",
        "boring_tasks": "Repetitive, dull work",
        "lack_of_belonging": "Feeling excluded or isolated",
        "management_change": "New leadership causing instability",
        "remote_issues": "Remote policy or tech problems",
        "performance_pressure": "Unrealistic performance metrics",
        "lack_of_recognition": "Efforts go unnoticed",
        "ethical_concerns": "Company violates personal ethics",
        "favoritism": "Certain employees get preferential treatment",
        "confusing_processes": "Too many rules or unclear policies",
        "office_politics": "Toxic cliques and gossip",
        "lack_of_resources": "No tools or support to do the job",
        "bad_clients": "Difficult customers or partners",
        "misc": "Other issues"
    }
    GRID_SIZE = 5
    TOTAL_CELLS = GRID_SIZE ** 2

LABEL_MAP = {
    k: (v if lang_code == "en" else {
        "workload": "Â∑•‰ΩúË≤†Ëç∑",
        "role_conflict": "ËßíËâ≤Ë°ùÁ™Å",
        "autonomy": "Áº∫‰πèËá™‰∏ª",
        "leadership": "È†òÂ∞éÂïèÈ°å",
        "toxic_culture": "ËÅ∑Â†¥ÊØíÊÄß",
        "unfairness": "‰∏çÂÖ¨Âπ≥ÂæÖÈÅá",
        "no_growth": "ÁÑ°ÊàêÈï∑Á©∫Èñì",
        "job_insecurity": "Â∑•‰Ωú‰∏çÁ©©",
        "work_life_imbalance": "Â§±Ë°°ÁîüÊ¥ª",
        "underpaid": "Ëñ™Ë≥áÈÅé‰Ωé",
        "burnout": "ËÅ∑Ê•≠ÂÄ¶ÊÄ†",
        "overqualified": "Â§ßÊùêÂ∞èÁî®",
        "boring_tasks": "Â∑•‰ΩúÂ§™ÁÑ°ËÅä",
        "lack_of_belonging": "‰∏çË¢´Êé•Á¥ç",
        "management_change": "ÁÆ°ÁêÜÂ±§Êõ¥Êõø",
        "remote_issues": "ÈÅ†Á´ØÂïèÈ°å",
        "performance_pressure": "Á∏æÊïàÂ£ìÂäõ",
        "lack_of_recognition": "Áº∫‰πèËÇØÂÆö",
        "ethical_concerns": "ÈÅìÂæ∑ÁñëÊÖÆ",
        "favoritism": "ÂÅèÂøÉ favoritism",
        "confusing_processes": "ÊµÅÁ®ãÊ∑∑‰∫Ç",
        "office_politics": "Ëæ¶ÂÖ¨ÂÆ§ÊîøÊ≤ª",
        "lack_of_resources": "Ë≥áÊ∫ê‰∏çË∂≥",
        "bad_clients": "ÂÆ¢Êà∂Èõ£Êêû",
        "misc": "ÂÖ∂‰ªñ"
    }.get(k, "ÂÖ∂‰ªñ")) for k, v in BingoConfig.CATEGORIES.items()
}

# === Initialize State ===
if "bingo_labels" not in st.session_state or st.session_state.get("lang_setting") != st.session_state.get("last_bingo_lang"):
    flat_labels = list(BingoConfig.CATEGORIES.keys())
    flat_labels += ["misc"] * (BingoConfig.TOTAL_CELLS - len(flat_labels))
    st.session_state.bingo_labels = random.sample(flat_labels, len(flat_labels))
    st.session_state.filled = [False] * BingoConfig.TOTAL_CELLS
    st.session_state.count = 0
    st.session_state.bingo_complete = False
    st.session_state.last_bingo_lang = st.session_state.get("lang_setting")

# === Grid Check ===
def check_bingo(filled: list[bool]) -> bool:
    size = BingoConfig.GRID_SIZE
    for r in range(size):
        if all(filled[r * size + c] for c in range(size)):
            return True
    for c in range(size):
        if all(filled[r * size + c] for r in range(size)):
            return True
    if all(filled[i * (size + 1)] for i in range(size)) or all(filled[(i + 1) * (size - 1)] for i in range(size)):
        return True
    return False

# === OpenAI Classification ===
def classify_with_openai_multi(text):
    defs = "\n".join(f"{k}: {v}" for k, v in BingoConfig.CATEGORIES.items())
    prompt = f"""You are a workplace psychology assistant. Classify the complaint into categories:

{defs}

Complaint: "{text}"

Return comma-separated category keys (e.g. workload, toxic_culture, misc).
"""
    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.2
        )
        raw = response.choices[0].message.content.strip().lower()
        return [c for c in raw.split(",") if c.strip() in BingoConfig.CATEGORIES] or ["misc"]
    except Exception as e:
        st.error(f"OpenAI error: {e}")
        return ["misc"]

# === Grid UI ===
def render_grid():
    cols = st.columns(BingoConfig.GRID_SIZE, gap="small")
    tile_style = """
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        padding: 12px;
        height: 80px;
        border-radius: 10px;
        margin: 4px;
        font-size: 14px;
        line-height: 1.3;
        font-weight: 600;
        box-sizing: border-box;
    """

    for i in range(BingoConfig.TOTAL_CELLS):
        with cols[i % BingoConfig.GRID_SIZE]:
            label_key = st.session_state.bingo_labels[i]
            label = LABEL_MAP.get(label_key, "Other")
            filled = st.session_state.filled[i]

            background = "#f87171" if filled else "#f3f4f6"
            color = "white" if filled else "#374151"
            border = "2px solid #ef4444" if filled else "1px solid #d1d5db"

            box_html = f"""
                <div style="{tile_style} background-color: {background}; color: {color}; border: {border};">
                    {"‚úî " if filled else ""}{label}
                </div>
            """
            st.markdown(box_html, unsafe_allow_html=True)


# === Main UI ===
st.title(label["title"])
st.caption(label["instruction"])
user_input = st.text_input(label["placeholder"])

if user_input:
    categories = classify_with_openai_multi(user_input)
    filled_any = False
    for cat in categories:
        try:
            idx = st.session_state.bingo_labels.index(cat)
            while st.session_state.filled[idx]:
                idx = st.session_state.bingo_labels.index(cat, idx + 1)
        except ValueError:
            idx = next((i for i, f in enumerate(st.session_state.filled) if not f), None)

        if idx is not None:
            st.session_state.filled[idx] = True
            st.session_state.count += 1
            filled_any = True

    if filled_any:
        st.success(f"{label['success']} {st.session_state.count} / 25")
    else:
        st.warning("Â∑≤Á∂ìÂÖ®ÈÉ®ÊâìÊªøÂï¶ÔºÅ")

# === Bingo & Mood ===
if not st.session_state.bingo_complete and check_bingo(st.session_state.filled):
    st.session_state.bingo_complete = True
    st.balloons()

if st.session_state.bingo_complete:
    st.markdown(label["complete"])
else:
    mood = BingoConfig.EMOJI_STAGES[min(st.session_state.count // 5, 4)]
    st.markdown(f"### {label['current_mood']} {mood}")

render_grid()

# === Download Form ===
if st.session_state.bingo_complete:
    st.markdown(label["download_section"])
    with open("assets/resignation_form.doc", "rb") as f:
        file_data = f.read()
    st.download_button(
        label=label["download_button"],
        data=file_data,
        file_name="resignation_form.doc",
        mime="application/msword",
        help=label["download_help"]
    )
